[{"content":"Exploring the transition from Control D to Unifi Cloud Gateway for ad-blocking with OISD lists. Understand the inner workings of Unifi’s DNS filtering system and how to leverage OISD domain blocklists efficiently.\nThe reason I’ve been a longtime user of Control D, primarily for bypassing geo-restricted video services and blocking ads for all users on my home network. In recent years, Control D has introduced community-based ad block lists. After trying many of them and receiving complaints from my partner, I settled on OISD.\nOne of my main issues with Control D is occasional slow DNS responses and, once or twice a month, complete service outages. This might be an issue on my end, but I wanted to address it.\nLast month, I switched from my Fritzbox router to a Unifi Cloud Gateway, which also supports adblocking. I decided to give this new adblocking feature a try so that I can stop using Control D, as I no longer need it for bypassing geo-restricted video services.\nInvestigate how UCG is working with Ad blocking Within the Unifi Network settings under Settings \u0026raquo; Security, you can enable ad blocking for specific networks:\nThe Unifi Cloud Gateway (UCG) runs on a Unix-based operating system, enabling the use of standard tools like grep, vim, find, cron, sed, etc.\nOn the UCG, you can verify that DNS filtering is active for three networks using the ps command:\nroot@Router:~# ps aux | grep dns root. 1215. 0.2. 0.5 1452968 17840 ? S\u0026lt;l. 11:15. 0:57 /usr/sbin/dnscrypt-proxy -config /run/dnscrypt-proxy.toml root. 1251. 0.0. 0.0. 0. 0 ? S. 11:15. 0:00 [dns_thread] nobody. 2466. 0.0. 0.0. 9080. 2900 ? S\u0026lt;. 11:15. 0:07 /usr/sbin/dnsmasq — conf-dir=/run/dnsmasq.conf.d/ — pid-file=/run/dnsmasq.pid root. 2492. 0.0. 0.0. 8948. 1308 ? S\u0026lt;. 11:15. 0:00 /usr/sbin/dnsmasq — conf-dir=/run/dnsmasq.conf.d/ — pid-file=/run/dnsmasq.pid nobody. 4269. 0.0. 0.0. 8948. 2504 ? S\u0026lt;. 11:15. 0:00 /usr/sbin/dnsmasq — conf-file=/run/dns.conf.d/dnsmasq-ppp0.conf — pid-file=/run/dnsmasq-ppp0.pid nobody. 33076. 0.0. 0.0. 29188. 1212 ? S\u0026lt;. 12:01. 0:01 dnsmasq -r /run/dnsfilter/dns-172.31.4.161-resolv.conf -C /run/dnsfilter/dns-172.31.4.161-conf.conf — pid-file=/run/dnsfilter/dns-172.31.4.161.pid nobody. 33084. 0.1. 0.6. 29188 21044 ? S\u0026lt;. 12:01. 0:28 dnsmasq -r /run/dnsfilter/dns-172.31.4.193-resolv.conf -C /run/dnsfilter/dns-172.31.4.193-conf.conf — pid-file=/run/dnsfilter/dns-172.31.4.193.pid nobody. 33091. 0.0. 0.6. 29188 21036 ? S\u0026lt;. 12:01. 0:05 dnsmasq -r /run/dnsfilter/dns-172.31.4.1-resolv.conf -C /run/dnsfilter/dns-172.31.4.1-conf.conf — pid-file=/run/dnsfilter/dns-172.31.4.1.pid root. 44750. 0.0. 0.3 240596 11628 ? S\u0026lt;l. 12:19. 0:00 /sbin/utm_dns_filter_capture -I br0 br2 br3 -V 6 root. 238514. 0.0. 0.0. 4924. 692 pts/0. S+. 18:23. 0:00 grep — color dns The output displays processes related to dnsmasq, indicating DNS filtering is functioning on these networks.\nThere are two configuration files:\ndns resolver dns filtering DNS Resolver The content of the resolv.conf is:\nroot@Router:~# cat /run/dnsfilter/dns-172.31.4.1-resolv.conf nameserver 203.0.113.1 The IP address 203.0.113.1 corresponds to a dedicated DNS filtering interface created by Unifi, as shown in the network interface details:\nroot@Router:~# ifconfig dnsfilter: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt;. mtu 1500 inet 203.0.113.1. netmask 255.255.255.0. broadcast 0.0.0.0 inet6 fe80::7475:5ff:fed3:2a93. prefixlen 64. scopeid 0x20\u0026lt;link\u0026gt; inet6 2001:db8:1000::1. prefixlen 64. scopeid 0x0\u0026lt;global\u0026gt; ether 96:72:03:90:fc:59. txqueuelen 1000. (Ethernet) RX packets 11056. bytes 1425993 (1.3 MiB) RX errors 0. dropped 0. overruns 0. frame 0 TX packets 13638. bytes 1676404 (1.5 MiB) TX errors 0. dropped 0 overruns 0. carrier 0. collisions 0 Each network where DNS filtering is enabled has its own interface, like dnsfilter.\nTo redirect DNS requests to the filtering interface (203.0.113.1), Unifi uses iptables rules:\nroot@Router:~# iptables -L -t nat | grep 203.0.113.1 DNAT. tcp. — 172.31.4.0/27. anywhere. tcp dpt:domain to:203.0.113.1:53 DNAT. udp. — 172.31.4.0/27. anywhere. udp dpt:domain to:203.0.113.1:53 These iptables rules ensure that DNS requests from the specified networks are forwarded to the DNS filtering interface.\nNow that we understand how Unifi implements ad blocking, the next question is: which domains are being blocked?\nDNS Filtering Let’s start by examining the configuration file to understand which lists are currently active:\nroot@Router:~# cat /run/dnsfilter/dns-172.31.4.1-conf.conf Configuration of DNS Forwarder interface=dnsfilter0 no-dhcp-interface=dnsfilter0 no-negcache conf-file=/run/dnsfilter/dns-172.31.4.1-ads.list conf-file=/run/dnsfilter/dns-172.31.4.1-black.list conf-file=/run/dnsfilter/dns-172.31.4.1-white.list Currently, both the black and white lists are empty. However, we may add domains to them in the future. The primary list used for blocking domains is the ads.list.\nNow, let’s examine the domains that are being blocked by the ads.list:\nroot@Router:~# tail -n10 /run/dnsfilter/dns-172.31.4.1-ads.list address=/www.rodepaudie.com/# address=/dflinity.org/# address=/steofenore.cyou/# address=/clinicservicecare.com/# address=/na1uren00n41.store/# address=/www.b7d643c5c9cf4e4092783ef022a69fdf.vistvx.pl/# address=/hotjar.com/# address=/w55c.net/# address=/crypto-group.org/# address=/ezonn.com/# address=/navi56.ru/# But where does Unifi get this list from? If we search the entire filesystem for the ads.list, we will discover the bash script responsible for populating this list.\nroot@Router:/usr/share/ubios-udapi-server/utm# grep -Ril \u0026#39;ads.list\u0026#39; / /mnt/.rofs/usr/share/ubios-udapi-server/ips/bin/getsig.sh /mnt/.rofs/usr/share/ubios-udapi-server/utm/ads.list /mnt/.rofs/usr/share/ubios-udapi-server/utm/adsblockipv4.list /mnt/.rofs/usr/share/ubios-udapi-server/utm/adsblockipv6.list /mnt/.rofs/usr/share/ubios-udapi-server/utm/bin/ubios-dns-filter-ads.sh /mnt/.rofs/usr/share/ubios-udapi-server/utm/bin/ubios-dns-filter-category.sh /mnt/.rofs/usr/share/ubios-udapi-server/utm/bin/ubios-dns-filter-whitelist.sh All six files seem really interesting. Let’s start with the sh scripts.\nroot@Router:/usr/share/ubios-udapi-server/utm# cat /mnt/.rofs/usr/share/ubios-udapi-server/utm/bin/ubios-dns-filter-ads.sh ####################################### # Update DNS database. # # ARGUMENTS: # None # # RETURN: # 0 - Success (file is valid) # 1 - Fail # 2 - Already up-to-date ####################################### update_dns_reputation() { USER_AGENT=\u0026#34;model/${DEVICEMODEL} version/${DEVICEVERSION} device_id/${DEVICE_ID}\u0026#34; log \u0026#34;Ads start update.\u0026#34; OUTPUT=\u0026#34;${ADSRUNPREFIX}/ads.list.gz\u0026#34; URL=\u0026#34;${UPDATEURL}/dns/ads.list.gz\u0026#34; download_and_validate_file \u0026#34;${USER_AGENT}\u0026#34; \u0026#34;${URL}\u0026#34; \u0026#34;${URL}.hash\u0026#34; \u0026#34;${OUTPUT}\u0026#34; RC=$? if [ \u0026#34;${RC}\u0026#34; -ne \u0026#34;0\u0026#34; ]; then log \u0026#34;The download will be retried on the next execution, skipping.\u0026#34; return ${RC} fi /bin/gzip -d \u0026#34;${OUTPUT}\u0026#34; -c \u0026gt;\u0026#34;${ADSRUNPREFIX}/ads.list.tmp\u0026#34; GZRC=$? if [ \u0026#34;${GZRC}\u0026#34; -ne \u0026#34;0\u0026#34; ]; then log \u0026#34;${TYPE} extraction failed. Return code: ${GZRC}\u0026#34; log \u0026#34;The update will be retried on the next execution, skipping.\u0026#34; return 1 fi mv \u0026#34;${ADSRUNPREFIX}/ads.list.tmp\u0026#34; \u0026#34;${ADSRUNPREFIX}/ads.list\u0026#34; log \u0026#34;Ads database extracted.\u0026#34; while IFS= read -r DOMAIN; do # Ignore own domains [[ \u0026#34;$DOMAIN\u0026#34; == *.ui.com ]] || [[ \u0026#34;$DOMAIN\u0026#34; == *.ubnt.com ]] \u0026amp;\u0026amp; continue echo \u0026#34;address=/$DOMAIN/#\u0026#34; \u0026gt;\u0026gt;\u0026#34;${ADSRUNPREFIX}/adsblockipv6.list.tmp\u0026#34; echo \u0026#34;address=/$DOMAIN/#\u0026#34; \u0026gt;\u0026gt;\u0026#34;${ADSRUNPREFIX}/adsblockipv4.list.tmp\u0026#34; done \u0026lt;\u0026#34;${ADSRUNPREFIX}/ads.list\u0026#34; mv \u0026#34;${ADSRUNPREFIX}/adsblockipv4.list.tmp\u0026#34; \u0026#34;${ADSRUNPREFIX}/adsblockipv4.list\u0026#34; mv \u0026#34;${ADSRUNPREFIX}/adsblockipv6.list.tmp\u0026#34; \u0026#34;${ADSRUNPREFIX}/adsblockipv6.list\u0026#34; # Update completed, save to the Persistent disk cp \u0026#34;${ADSRUNPREFIX}/ads.list\u0026#34; \u0026#34;${ADSFIRMWAREPREFIX}/ads.list\u0026#34; cp \u0026#34;${ADSRUNPREFIX}/adsblockipv4.list\u0026#34; \u0026#34;${ADSFIRMWAREPREFIX}/adsblockipv4.list\u0026#34; cp \u0026#34;${ADSRUNPREFIX}/adsblockipv6.list\u0026#34; \u0026#34;${ADSFIRMWAREPREFIX}/adsblockipv6.list\u0026#34; # Restart utm_dns_filter_capture if [ -s /run/utm_dns_filter_capture.pid ]; then UTM_DNS_FILTER_CAPTURE_PID=$(cat /run/utm_dns_filter_capture.pid) log \u0026#34;utm_dns_filter_capture PID file found, restart service.\u0026#34; if ! /bin/kill -SIGTERM \u0026#34;${UTM_DNS_FILTER_CAPTURE_PID}\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1; then log \u0026#34;utm_dns_filter_capture fail to sent signal.\u0026#34; fi fi rm -f \u0026#34;${OUTPUT}\u0026#34; 2\u0026gt;\u0026amp;1 log \u0026#34;Ads update finished.\u0026#34; return 0 } Yes, we found the script we were looking for. Unifi retrieves the list from the following location: https://assets.unifi-ai.com/ads.list.gz. The script extracts the file and copies the content to adsblockipv4.list and adsblockipv6.list.\nAfterward, it kills the dnsfilter process, prompting the system to restart the process.\nThe next question is: how often is this list being updated? Let’s perform another grep.\nroot@Router:/usr/share/ubios-udapi-server/utm# grep -Ril \u0026#39;getsig.sh\u0026#39; / /etc/cron.d/ips-service-alien /etc/cron.d/ips-service-tor /etc/cron.d/ips-service-ads /etc/cron.d/ips-service-rules Interesting. There are cronjobs that initiate this process:\nroot@Router:/usr/share/ubios-udapi-server/utm# cat /etc/cron.d/ips-service-ads MAILTO=\u0026#34;\u0026#34; 0 */24. * * * root /usr/share/ubios-udapi-server/ips/bin/getsig.sh \u0026#39;ads\u0026#39; \u0026#39;xx:xx:xx:xx:xx:xx\u0026#39; \u0026#39;UDRULT.ipq5322.v3.2.12.7765dbb.240126.0152\u0026#39; \u0026#39;UDRULT\u0026#39; \u0026#39;a748\u0026#39; \u0026#39;splay\u0026#39; So, does it start the process every day at 00:00?\nUpon further examination of the script, I discovered that the splay option introduces a random sleep\nHow we use OISD as domain blocking list You can find all the lists on the OISD website, including the comprehensive OISD big list:\nWe’re particularly interested in the dnsmasq2 file since Unifi utilizes DNSMasq version 2.86.\nroot@Router:~# df -hT Filesystem. Type. Size. Used Avail Use% Mounted on udev. devtmpfs. 1.5G. 0. 1.5G. 0% /dev tmpfs. tmpfs. 296M. 107M. 189M. 37% /run /dev/disk/by-partlabel/root. ext4. 2.0G. 1.2G. 688M. 63% /boot/firmware /dev/loop0. squashfs. 568M. 568M. 0 100% /mnt/.rofs /dev/disk/by-partlabel/overlay. ext4. 9.3G. 1.3G. 7.6G. 15% /mnt/.rwfs overlayfs-root. overlay. 9.3G. 1.3G. 7.6G. 15% / /dev/disk/by-partlabel/log. ext4. 974M. 101M. 807M. 12% /var/log /dev/disk/by-partlabel/persistent ext4. 2.0G. 128M. 1.7G. 7% /persistent tmpfs. tmpfs. 1.5G. 28K. 1.5G. 1% /dev/shm tmpfs. tmpfs. 5.0M. 0. 5.0M. 0% /run/lock tmpfs. tmpfs. 738M. 44K. 738M. 1% /tmp tmpfs. tmpfs. 16M. 0. 16M. 0% /var/log/ulog tmpfs. tmpfs. 64M. 1.4M. 63M. 3% /var/opt/unifi/tmp All data mounted on the /persistent volume (as the name suggests) will be preserved during firmware updates, reboots, and other operations.\nI’ve developed a script that accomplishes the following tasks:\nDownloads the dnsmasq2 file from oisd.nl. Modifies the file to match the syntax of the original file. Copies the content to adsblockipv4.list and adsblockipv6.list. Restarts the utm_dns_filter_capture. Restarts dnsmasq. Download and alter the dnsmasq2 file from oisd.nl Here’s an example layout of the downloaded file:\n# Version: 202405081506 # Title: oisd small # Description: Block. Don\u0026#39;t break. # Syntax: DNSMasq ver 2.86 and above # Entries: 48515 # Last modified: 2024–05–08T15:06:31+0000 # Expires: 1 hours # License: https://github.com/sjhgvr/oisd/blob/main/LICENSE # Maintainer: Stephan van Ruth # Homepage: https://oisd.nl # Contact: contact@oisd.nl local=/0-02.net/ local=/0.101tubeporn.com/ local=/0.code.cotsta.ru/ local=/000.gaysexe.free.fr/ local=/000free.us/ local=/000tristanprod.free.fr/ local=/000webhostapp.com/ local=/002777.xyz/ local=/00280181d0.com/ local=/00518b6f0c.com/ curl -s -o \u0026#34;${BASE}\u0026#34;/dnsmasq2 https://big.oisd.nl/dnsmasq2 sed -i \u0026#39;/^$/d\u0026#39; \u0026#34;${BASE}\u0026#34;/dnsmasq2 #removes all empty lines sed -i \u0026#39;/^#/d\u0026#39; \u0026#34;${BASE}\u0026#34;/dnsmasq2 #removes all lines starting wwith # sed -i \u0026#39;s/local=/address=/g\u0026#39; \u0026#34;${BASE}\u0026#34;/dnsmasq2 #replace local with address sed -i s/$/#/ \u0026#34;${BASE}\u0026#34;/dnsmasq2 #add # after ther last / Here’s a formatted display of the result: address=/0-02.net/# address=/0.101tubeporn.com/# address=/0.code.cotsta.ru/# address=/000.gaysexe.free.fr/# address=/000free.us/# address=/000tristanprod.free.fr/# address=/000webhostapp.com/# address=/002777.xyz/# address=/00280181d0.com/# address=/00518b6f0c.com/# Copy the content to adsblockipv4.list and adsblockipv6.list To copy the content over to the adsblockipv4.list and adsblockipv6.list files, you can use the following commands:\ncat \u0026#34;${BASE}\u0026#34;/dnsmasq2 \u0026gt; /run/utm/adsblockipv4.list cat \u0026#34;${BASE}\u0026#34;/dnsmasq2 \u0026gt; /run/utm/adsblockipv6.list Super easy, be that is needed to fill the file /run/dnsfilter/dns-172.31.4.1-ads.list\nRestart utm_dns_filter_capture # Restart utm_dns_filter_capture if [ -s /run/utm_dns_filter_capture.pid ]; then UTM_DNS_FILTER_CAPTURE_PID=$(cat /run/utm_dns_filter_capture.pid) log \u0026#34;utm_dns_filter_capture PID file found, restart service.\u0026#34; if ! /bin/kill -SIGTERM \u0026#34;${UTM_DNS_FILTER_CAPTURE_PID}\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1; then log \u0026#34;utm_dns_filter_capture fail to sent signal.\u0026#34; fi fi In this script snippet inspired by UniFi, we’re checking for the utm_dns_filter_capture process by its PID (Process ID). If the process is found, the script terminates it. Subsequently, the system automatically restarts the daemon.\nRestart dnsmasq Finally, we need to restart DNSMasq to load the updated list and enable domain blocking.\nrestartdnsfilter() { for killdns in $(cat /run/dnsfilter/*.pid 2\u0026gt;/dev/null); do kill -9 \u0026#34;${killdns}\u0026#34; done if [ -f \u0026#34;/run/dnsfilter/dnsfilter\u0026#34; ]; then sleep 5 for restartns in $(cat /run/dnsfilter/dnsfilter); do ip netns exec \u0026#34;${restartns}\u0026#34; dnsmasq -r /run/dnsfilter/\u0026#34;${restartns}\u0026#34;-resolv.conf -C /run/dnsfilter/\u0026#34;${restartns}\u0026#34;-conf.conf --pid-file=/run/dnsfilter/\u0026#34;${restartns}\u0026#34;.pid done fi } restartdnsfilter This section of the script is also adapted from the Unifi script. Similarly, it terminates the process, but the key distinction is that it initiates the process independently rather than relying on the system to do so.\nthe complete script Putting it all together will make the following script:\n#!/bin/bash BASE=\u0026#34;/persistent/scripts\u0026#34; log() { echo \u0026#34;$*\u0026#34; /usr/bin/logger -t \u0026#34;ads\u0026#34; \u0026#34;$*\u0026#34; } backupDate=$(date +%s) restartdnsfilter() { for killdns in $(cat /run/dnsfilter/*.pid 2\u0026gt;/dev/null); do kill -9 \u0026#34;${killdns}\u0026#34; done if [ -f \u0026#34;/run/dnsfilter/dnsfilter\u0026#34; ]; then sleep 5 for restartns in $(cat /run/dnsfilter/dnsfilter); do ip netns exec \u0026#34;${restartns}\u0026#34; dnsmasq -r /run/dnsfilter/\u0026#34;${restartns}\u0026#34;-resolv.conf -C /run/dnsfilter/\u0026#34;${restartns}\u0026#34;-conf.conf --pid-file=/run/dnsfilter/\u0026#34;${restartns}\u0026#34;.pid done fi } log \u0026#34;Start updating ads block list\u0026#34; curl -s -o \u0026#34;${BASE}\u0026#34;/dnsmasq2 https://big.oisd.nl/dnsmasq2 sed -i \u0026#39;/^$/d\u0026#39; \u0026#34;${BASE}\u0026#34;/dnsmasq2 sed -i \u0026#39;/^#/d\u0026#39; \u0026#34;${BASE}\u0026#34;/dnsmasq2 sed -i \u0026#39;s/local=/address=/g\u0026#39; \u0026#34;${BASE}\u0026#34;/dnsmasq2 sed -i s/$/#/ \u0026#34;${BASE}\u0026#34;/dnsmasq2 cp /run/utm/adsblockipv4.list /run/utm/adsblockipv4.${backupDate}.list cp /run/utm/adsblockipv6.list /run/utm/adsblockipv6.${backupDate}.list cp \u0026#34;${BASE}\u0026#34;/dnsmasq2 /run/utm/adsblockipv4.list cp \u0026#34;${BASE}\u0026#34;/dnsmasq2 /run/utm/adsblockipv6.list rm -rf \u0026#34;${BASE}\u0026#34;/dnsmasq2 # Restart utm_dns_filter_capture if [ -s /run/utm_dns_filter_capture.pid ]; then UTM_DNS_FILTER_CAPTURE_PID=$(cat /run/utm_dns_filter_capture.pid) log \u0026#34;utm_dns_filter_capture PID file found, restart service.\u0026#34; if ! /bin/kill -SIGTERM \u0026#34;${UTM_DNS_FILTER_CAPTURE_PID}\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1; then log \u0026#34;utm_dns_filter_capture fail to sent signal.\u0026#34; fi fi sleep 20 restartdnsfilter log \u0026#34;OISD Updated\u0026#34; Automate the script to run during the night The last part is to run this script every night. This as well is the easy part\nroot@Router:~# cat /etc/cron.d/ips-service-ads MAILTO=\u0026#34;\u0026#34; 0 */24. * * * root /usr/share/ubios-udapi-server/ips/bin/getsig.sh \u0026#39;ads\u0026#39; \u0026#39;xx:xx:xx:xx:xx:xx\u0026#39; \u0026#39;UDRULT.ipq5322.v3.2.12.7765dbb.240126.0152\u0026#39; \u0026#39;UDRULT\u0026#39; \u0026#39;a748\u0026#39; \u0026#39;splay\u0026#39; \u0026amp;\u0026amp; /persistent/scripts/oisd.sh Next step is to make the script runabale:\nroot@Router:~# chmod u+x /persistent/scripts/oisd.sh This line grants permission to the script owner (root) to execute the script.\nI added the new script at the end with a random timer using splay and the \u0026amp;\u0026amp; operator. This setup ensures that our script will run only if the first part executes successfully.\nNOTE: Please be aware that after every reboot or firmware update, the cronjob adjustments will be reset.\nTesting After manually running the script or waiting until the next day, we can test if it is working. This test should be conducted from a network where ad blocking has been enabled.\nServer:\t172.31.4.193 Address:\t172.31.4.193#53 Name:\tzzztest.oisd.nl Address: 0.0.0.0 ","permalink":"https://www.groenewoud.ch/posts/enhanced-ad-blocking-oisd-unifi-cloud-gateway/","summary":"\u003cp\u003eExploring the transition from Control D to Unifi Cloud Gateway for ad-blocking with OISD lists. Understand the inner workings of Unifi’s DNS filtering system and how to leverage OISD domain blocklists efficiently.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn-images-1.medium.com/max/1600/1*q9Zs0_86-2rskBvMgSrf1w@2x.jpeg\"\u003e\u003c/p\u003e\n\u003ch2 id=\"the-reason\"\u003eThe reason\u003c/h2\u003e\n\u003cp\u003eI’ve been a longtime user of  \u003ca href=\"https://www.controld.com/\"\u003eControl D\u003c/a\u003e, primarily for bypassing geo-restricted video services and blocking ads for all users on my home network. In recent years, Control D has introduced community-based ad block lists. After trying many of them and receiving complaints from my partner, I settled on  \u003ca href=\"https://oisd.nl/\"\u003eOISD\u003c/a\u003e.\u003c/p\u003e","title":"Master Ad Blocking with Unifi Cloud Gateway + OISD Lists"}]